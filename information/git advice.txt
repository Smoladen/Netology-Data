Система контроля версий Git — самый популярный в мире инструмент для командной работы над IT-проектами

Git решает следующие задачи:

Хранение актуальных версий файлов
Отслеживание изменений файлов
Командное обсуждение изменений
Параллельное развитие проекта
Возможность копирования проекта
Публичная и приватная демонстрация файлов
Перед стартом работы с Git необходимо:

настроить видимость скрытых папок и файлов
настроить видимость расширения файлов
настроить работу редактора кода (рекомендуемый Visual Code Studio)
настроить плагин для универсального языка разметки Markdown
Чтобы установить Git на своем компьютере, загрузите файл по ссылке (выберите свою операционную систему Windows/macOS/Linux)

Командная строка (терминал) - это интерфейс для общения с компьютером напрямую, без дополнительных программ

Как найти командную строку в своей операционной системе?

Windows - Пуск - Git Bash
macOS - Launchpad - Терминал
Linux - Открытие терминала сочетанием клавиш Ctrl + Alt + T
Как проверить версию Git, которая установлена на компьютере?

Введите в терминале команду git – version
Какие глобальные настройки по Git нужно произвести перед стартом работы?

Задайте имя для Git через команду
git config --global user.name “Emma Paris” (в кавычках указать ваше имя латинскими буквами)

Задайте адрес электронной почты для Git через команду

git config --global user.email “eparis@atlassian.com” (в кавычках указать вашу электронную почту)
(в кавычках указать вашу электронную почту)

Задайте правильный формат строк.
Если у вас macOS или Linux , последовательно выполните две команды:
git config --global core.autocrlf input
git config --global core.safecrlf warn

Если у вас Windows , то выполните последовательно эти команды:

git config --global core.autocrlf true

git config --global core.safecrlf warn

Дальше общая для всех операционных систем команда, которая позволит

избежать нечитаемых строк в неправильной кодировке:

git config --global core.quotepath off

Задайте общепринятое название основной ветки в репозитории в Git — main через команду git config --global init.defaultBranch main
Как получить подсказку (справку) по командам?

git help -g даст подробную подсказку по всем доступным командам
git help команда даст подсказку по конкретной команде
чтобы выйти из справки, нажмите Escape → наберите :wq → нажмите Enter
После изучения теоретического материала рекомендуем приступить к практике. Выполните самостоятельное задание - квиз по установке Git на своей операционной системе. Выполните его обязательно. Это позволит вам выполнять дальнейшие практические задания в рамках курса.

Желаем успехов в обучении!
Репозиторий — папка, за которой следит Git. Бывают 2 видов:

локальный - располагается на локальным компьютере
удаленный - располагается в интернете, связан с папкой на локальным компьютере
Как создать локальный репозиторий?

Создайте папку проекта на компьютере
Откройте для папки терминал
Выполните команду git init
Проверьте, что появилась папка .git
Коммит - снимок ваших локальных файлов, записанный в локальный репозиторий

Возможности коммита

Отслеживать, кто, что и когда когда изменял
Возвращаться к предыдущему состоянию файла
Переписывать историю файлов
Как создать коммит?

Добавьте файл или файлы в отслеживаемые командой git add имя файла
Создайте коммит и подпишите его командой git commit -m "Подпись коммита"
Как проверить состояние файла?

На любом из этапов вы можете выполнить команду git status
Как прочитать историю коммита?

Выполните в терминале команду git log --oneline
Пример истории коммита

2199e0e (HEAD -> main) change README

9b7bb91 add README

Слева направо и сверху-вниз

хэш коммита
указатель на коммит, где сейчас находимся
коммит, где находимся
предыдущий коммит
Как исправить историю коммита?

Внесите изменения в файл
Сохраните файл и добавьте его в отслеживаемые через команду git add имя файла. Если нужно добавить сразу несколько файлов, то используйте флаг -A git add -А
Поместите файл в последний коммит — снова используем команду git commit --amend -m “название изменений”.
Как переключиться между коммитами?

Переключиться между коммитами проекта можно командой git checkout хеш
Вернуться к последнему коммиту можно командой git checkout -
После изучения теоретического материала рекомендуем приступить к практике. Выполните самостоятельное задание - квиз по созданию локального репозитория в Git. Выполните его обязательно. Это позволит вам выполнять дальнейшие практические задания в рамках курса.
GitHub - самый популярный в мире сервис для публикации и хранения в интернете проектов, а также для командной разработки.

Для начала работы с сервисом необходимо пройти регистрацию на сайте

SSH-ключ - это уникальный набор символов, который позволяет связать

локальный и удаленный репозитории, чтобы:

из командной строки отправлять данные прямо в удалённый репозиторий

проекты попадали в нужный профиль, а не в чужой

Ветка в Git представляет собой указатель на снимок изменений. Эта опция в Git, которая позволяет создавать «параллельную реальность» в проектах, когда:

над проектом работает несколько человек
каждый делает свою задачу
чтобы не мешать друг другу, каждый работает в своей ветке
когда задача готова, то всё сливается в основную ветку
Ключевые действия и команды

Чтобы сгенерировать SSH-ключ, нужно в терминале ввести команду ssh keygen , скопировать окончание пути ключа. Далее в терминале введите команду cat ~ окончание пути до файла, который вы только что скопировали. Скопируйте длинный набор символов. В GitHub в нажмите New SSH Key и вставьте данный набор символов.
Чтобы создать новый удаленный репозиторий, нажмите в GitHub кнопку New Repository
Чтобы связать удаленный и локальный репозитории, выполните команду
git remote add origin ссылка на папку удалённого репозитория
git remote -v  чтобы проверить к какому удалённому репозиториб мы подключены(если подключены)

Чтобы отправить что-то в удалённый репозиторий, нужно воспользоваться командой git push -u origin main

Чтобы создать копию чужого проекта на GitHub, нужно нажать кнопку Fork на странице проекта

Чтобы клонировать удалённый репозиторий на компьютер, нужно скопировать ссылку по кнопке Code и затем выполнить в терминале команду git clone ссылка-на-репозиторий. После клонирования не забыть перейти в новую папку командой cd имя-папки

Чтобы создать новую ветку и переключиться на неё, нужна команда git checkout -b имя-новой-ветки
Чтобы создать новую ветку надо написать git bracnh name_of_the_branch
Чтобы переключаться между ветками, выполняем команду git checkout имя-ветки

Для слияния находимся на ветке, куда сливаем, и выполняем git merge имя-сливаемой-ветки

При разрешении конфликта обязательно удаляем служебные символы, оставляем нужный вариант и коммитим изменения
При командной разработке важно уметь:

отправлять изменения в проект в удаленный репозиторий
работать с коммитами
настраивать видимость файлов и папок
.gitignore — это файл-настройка, который позволяет игнорировать нужные папки и файлы во время публикации в удалённый репозиторий на GitHub

Ключевые действия и команды при командной разработке

Для обновления командного проекта на GitHub нужно использовать команду git pull
Чтобы переключаться к предыдущему состоянию проекта, используйте команду git checkout хеш коммита
Посмотреть всю историю проекта можно через команду git log --oneline --all
Чтобы отменить коммит в удалённом репозитории, нужно использовать команду git revert хеш коммита для отмены
Настроить .gitignore можно для папки и файла с помощью команды git rm --cached имя-файла

Issues — это система ведения задач в GitHub. Облегченный вариант трекера.
Используются в следующих ситуациях:

Сбор обратной связи от пользователей по ошибкам
Планирование доработки проекта
Обсуждение внутри каждой задачи
Маркировка задач разными лейблами. Сбор задач в группы
Назначение исполнителя для задачи
Pull request - запросы на слияние. Удобный способ предложить свои изменения в командный проект в формате, который предполагает обсуждение и код-ревью

Используется в следующих ситуациях:

чтобы не засорять историю проекта коммитами
внесение изменений не в свой проект
Ключевые действия при командной разработке

Для создания issues в GitHub используйте кнопку New Issue , в поле впишите суть задачи и далее подтвердите создание через Submit Issues
Внести изменения в командный проект можно через pull request
При наличии прав доступ к репозиторию внести изменения в проект можно через New Pull Request, далееописать сути изменений и отправить на код-ревью через Create Pull Request
При отсутствии прав доступ к репозиторию предложить изменения в проект можно следующим образом: сделать fork репозитория, выбрать Open Pull Request, выбрать источник изменений через compare across forks, создать New Pull Request
Issues и pull request нельзя удалить на GitHub, их можно только закрыть
GitHub Pages - бесплатный хостинг для статических файлов, созданных на базе HTML, CSS, JavaScript и Markdown. Его удобно использовать для демонстрации своей работы заказчику и работодателю

Ключевые действия

Чтобы опубликовать файл, зайдите на GitHub в раздел Settings, выберите ветку для публикации и нажмите Save
Чтобы удалить репозиторий с GitHub, перейдите в раздел Settings, далее выберите Danger Zone и Delete this repository
Будьте внимательны. После удаления репозитория в GitHub восстановить его не получится
