how can i copy one two dimensiaonal array into another


AI
AI
Edit code
To copy one two-dimensional array into another, you can use a nested loop to iterate through each element of the source array and assign it to the corresponding element in the destination array. Here's an example of how you can achieve this:

void copy_two_dim_array(int** src, int** dest, int rows, int cols) {
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      dest[i][j] = src[i][j];
    }
  }
}

You can then call this function in your main code to copy the arrays:

int main() {
  int rows;
  int cols;
  // ... (other code)
  int** created_array_old = create_two_dim_array(rows, cols);
  int** created_array_new = create_two_dim_array(rows, cols);
  fill_two_dim_array(created_array_old, rows, cols);
  copy_two_dim_array(created_array_old, created_array_new, rows, cols);
  print_two_dim_array(created_array_new, rows, cols);
  // ... (other code)
}

Let me know if you need further assistance!

SM

smoladen2003
smoladen2003
17 hours ago
why my code does not execute the second print_two_dim_array function


AI
AI
It looks like the issue might be with the indices used in your check_if_alive function. Specifically, in the check_if_alive function, the loops should iterate from 1 to rows-1 and from 1 to cols-1. This is because the neighborhood of a cell at the boundary (i.e., cells with i=0 or i=rows-1, and j=0 or j=cols-1) is incomplete, and the function tries to access elements outside the array boundaries.

Here's the modified check_if_alive function:

C

Copy

Insert
void check_if_alive(int** old_array, int** new_array, int rows, int cols){
  int alive_cells = 0;
  for(int i = 1; i < rows-1; i++){
      for(int j = 1; j < cols-1; j++){
        alive_cells = old_array[i-1][j-1] + old_array[i-1][j] + old_array[i-1][j+1] + old_array[i][j-1] + old_array[i][j+1] + old_array[i+1][j-1] + old_array[i+1][j] + old_array[i+1][j+1];
        
        if(alive_cells == 3)
          new_array[i][j] = 1;
        if(alive_cells == 2)
          new_array[i][j] = old_array[i][j];
        if(alive_cells < 2 || alive_cells > 3)
          new_array[i][j] = 0;
      }
  }
}
With this modification, the function should now correctly update the new_array. After making this change, you should see the result of the second print_two_dim_array function.

Let me know if you need further assistance!

SM

smoladen2003
smoladen2003
17 hours ago
no it stil does not work


AI
AI
I apologize for the confusion. It seems that the issue might be with the check_if_alive function. Specifically, the loops in the check_if_alive function should iterate from 1 to rows-1 and from 1 to cols-1 instead of from 0 to rows-1 and from 0 to cols-1. Additionally, there's a missing closing brace at the end of the check_if_alive function.

Here's the modified check_if_alive function:

C

Copy

Insert
void check_if_alive(int** old_array, int** new_array, int rows, int cols){
  int alive_cells = 0;
  for(int i = 1; i < rows-1; i++){
      for(int j = 1; j < cols-1; j++){
        alive_cells = old_array[i-1][j-1] + old_array[i-1][j] + old_array[i-1][j+1] + old_array[i][j-1] + old_array[i][j+1] + old_array[i+1][j-1] + old_array[i+1][j] + old_array[i+1][j+1];
        
        if(alive_cells == 3)
          new_array[i][j] = 1;
        if(alive_cells == 2)
          new_array[i][j] = old_array[i][j];
        if(alive_cells < 2 || alive_cells > 3)
          new_array[i][j] = 0;
      }
  }
}
After making these modifications, the check_if_alive should work properly and the second print_two_dim_array function should display the updated array.

Let me know if you need further assistance!

SM

smoladen2003
smoladen2003
17 hours ago
thank tou very much


AI
AI
You're welcome! If you have any other questions, feel free to ask.

SM

smoladen2003
smoladen2003
13 minutes ago
Hello the problem with this code is that check_if _alive cannot check the first rows of the array without trying to access elements outside the array boundaries. How can i fix it


AI
AI
Reclassify message
Select action
To fix the issue with check_if_alive function trying to access elements outside the array boundaries, you can make use of conditional statements to only check the boundary cells differently.

You can modify the check_if_alive function to handle the boundary cells differently from the inner cells. Here's an example of how you can do this:

C

Copy

Insert
void check_if_alive(int** old_array, int** new_array, int rows, int cols){
  int alive_cells = 0;
   
  for(int i = 0; i < rows; i++){
      for(int j = 0; j < cols; j++){
        if (i == 0 || j == 0 || i == rows-1 || j == cols-1) {
          new_array[i][j] = old_array[i][j];  // Simply copy the value for boundary cells
        } else {
          alive_cells = old_array[i-1][j-1] + old_array[i-1][j] + old_array[i-1][j+1] + old_array[i][j-1] + old_array[i][j+1] + old_array[i+1][j-1] + old_array[i+1][j] + old_array[i+1][j+1];
        
          if(alive_cells == 3)
            new_array[i][j] = 1;
          else if(alive_cells == 2)
            new_array[i][j] = old_array[i][j];
          else
            new_array[i][j] = 0;
        }
      }
  }
}
By implementing this change, the check_if_alive function will now handle the boundary cells differently and avoid trying to access elements outside the array boundaries.

Let me know if you need further assistance!