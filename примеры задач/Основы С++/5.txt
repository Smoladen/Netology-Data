Задача 1. Ввод массива с консоли
Описание
Вам необходимо организовать ввод массива с консоли. Сначала спросите у пользователя размер массива, а затем предложите ему по очереди ввести каждый элемент массива. В конце выведите на экран получившийся массив.

Пример работы программы
Введите размер массива: 3
arr[0] = 4
arr[1] = 8
arr[2] = 54
Введённый массив: 4 8 54
#include <iostream>

int main() {
  int n;

  std::cout << "Введите размер массива: ";
  std::cin >> n;

  int* arr = new int[n];

  for(int i = 0; i < n; i++){
    std::cout << "arr[" << i << "] = ";
    std::cin >> arr[i];
  }

  std::cout << "Введённый массив: ";

  for(int i = 0; i < n; i++){
    std::cout << arr[i] << " ";
  }
  delete[] arr;
}

Задача 2. Создатель массивов
Описание
Напишите функцию create_array, которая принимает на вход размер массива, создаёт внутри себя динамический массив для значений типа double, инициализирует его нулями и возвращает вызывающей функции. Используйте эту функцию для создания массива. Запросите у пользователя размер массива и выведите на консоль получившийся массив. В конце на забудьте очистить память.

Пример работы программы
Введите размер массива: 10
Массив: 0 0 0 0 0 0 0 0 0 0

#include <iostream>

double* double_ptr;

void create_array(int size) {
  double_ptr = new double[size]();
  
}

int main() {
  int size;

  std::cout << "Введите размер массива: ";
  std::cin >> size;
  create_array(size);

  
  std::cout << "Массив: ";
  for(int i = 0; i < size; i++){
    std::cout << double_ptr[i] << " ";
  }

  delete[] double_ptr;
  return 0;
}

Описание
Напишите четыре функции:

create_two_dim_array: принимает на вход количество строк и столбцов. Создаёт целочисленный двумерный динамический массив заданной размерности и возвращает указатель на него.
fill_two_dim_array: принимает на вход указатель на двумерный целочисленный массив, количество строк и столбцов в нём. Заполняет полученный массив значениями из таблицы умножения. Таблица не ограничена 10 строками или 10 столбцами. Не возвращает ничего.
print_two_dim_array: принимает на вход указатель на двумерный целочисленный массив, количество строк и столбцов в нём. Выводит полученный массив на консоль. Не возвращает ничего.
delete_two_dim_array: принимает на вход указатель на двумерный целочисленный массив, количество строк и столбцов в нём. Очищает полученный массив. Не возвращает ничего.
Используйте эти функции для организации работы программы, которая спрашивает у пользователя количество строк и столбцов и выводит на консоль таблицу умножения заданной размерности.

Примеры работы программы
Введите количество строк: 10
Введите количество столбцов: 10
Таблица умножения:
 1  2  3  4  5  6  7  8  9  10
 2  4  6  8 10 12 14 16 18  20
 3  6  9 12 15 18 21 24 27  30
 4  8 12 16 20 24 28 32 36  40
 5 10 15 20 25 30 35 40 45  50
 6 12 18 24 30 36 42 48 54  60
 7 14 21 28 35 42 49 56 63  70
 8 16 24 32 40 48 56 64 72  80
 9 18 27 36 45 54 63 72 81  90
10 20 30 40 50 60 70 80 90 100

#include <iostream>

int** create_two_dim_array(int rows, int cols){

  int** array = new int* [rows];
  
  for (int i = 0; i < cols; i++){
    array[i] = new int[cols];
  }
  
  return array;
  
}

void fill_two_dim_array(int** array, int rows, int cols){
  
  for(int i = 0; i < rows; i++){
    for(int j = 0; j < cols; j++){
      array[i][j] = (j+1)*(i+1);
    }
  }
  
}

void print_two_dim_array(int** array, int rows, int cols){

  for(int i = 0; i < rows; i++){
    for(int j =0; j < cols; j++){
      std::cout << array[i][j] << "\t";
    }
    std::cout<< std::endl;
  }
  
}

void delete_two_dim_array(int** array, int rows, int cols){

  for(int i =0; i < rows; i++){
    delete[] array[i];
  }
  
  delete[] array;
  
}

int main() {
  int rows;
  int cols;
  
  std::cout << "Введите количество строк: ";
  std::cin >> rows;
  std::cout << "Введите количество столбцов: ";
  std::cin >> cols;


  std::cout << "Таблица умножения: " << std::endl;
  
  int ** created_array = create_two_dim_array(rows,cols);
  
  fill_two_dim_array(created_array,rows,cols);
  print_two_dim_array(created_array,rows,cols);
  delete_two_dim_array(created_array,rows,cols);

  return 0;
}
